//RECURSIVE APPROACH
class Solution {
public:
int minpath(vector<vector<int>>& obstacleGrid,int i,int j){
     if(i>=0 && j>=0 && obstacleGrid[i][j]==1){
         return 0;
     }
    if(i==0 && j==0){
        return 1;
    }
    if(i<0|| j<0){
        return 0;
    }
   
    int a=minpath(obstacleGrid,i-1,j);
    int b=minpath(obstacleGrid,i,j-1);
    return a+b;
}


    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        return minpath(obstacleGrid,n-1,m-1);
    }
};

//MEMOIZATION
class Solution {
public:
int minpath(vector<vector<int>>& obstacleGrid,int i,int j,vector<vector<int>>&dp){
     if(i>=0 && j>=0 && obstacleGrid[i][j]==1){
         return 0;
     }
    if(i==0 && j==0){
        return 1;
    }

    if(i<0|| j<0){
        return 0;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
   
    int a=minpath(obstacleGrid,i-1,j,dp);
    int b=minpath(obstacleGrid,i,j-1,dp);
    return dp[i][j]= a+b;
}
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        vector<vector<int>>dp(n+1,vector<int>(m,-1));
        return minpath(obstacleGrid,n-1,m-1,dp);
    }
};
